// Include necessary headers
#include "main.h"
#include "dwt_stm32_delay.h"
#include "ov7670.h"
#include "usart.h"

// Global variables and function declarations
I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart1;
TIM_HandleTypeDef htim1;

uint32_t sensor_time;
uint16_t distance;
uint8_t image_buffer[IMAGE_SIZE];

uint32_t Read_HCSR04(void);
void capture_image(void);
void send_image_via_usart(void);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_I2C1_Init();
    MX_USART1_UART_Init();
    MX_TIM1_Init();
    DWT_Delay_Init();

    init_camera();
    HAL_UART_Transmit(&huart1, (uint8_t*)"Bluetooth Initialized\r\n", 23, HAL_MAX_DELAY);

    while (1) {
        sensor_time = Read_HCSR04(); 
        distance = sensor_time * 0.034 / 2; 

        if(distance <= 4) {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_SET);
            capture_image();
            send_image_via_usart();
        } else if(distance > 4 && distance <= 6) {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
        } else if(distance > 6 && distance <= 8) {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
        } else if(distance > 8 && distance <= 10) {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_RESET);
        }
    }
}

void init_camera(void) {
    OV7670_Init(&hi2c1, &htim1);
}

void capture_image(void) {
    OV7670_Capture(image_buffer);
}

void send_image_via_usart(void) {
    HAL_UART_Transmit(&huart1, image_buffer, IMAGE_SIZE, HAL_MAX_DELAY);
}

uint32_t Read_HCSR04(void) {
    uint32_t local_time = 0;
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); 
    DWT_Delay_us(10);                                   
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); 

    while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)));

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) {        
        local_time++;                                   
        DWT_Delay_us(1);                                
    }
    return local_time * 2;
}
