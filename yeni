#include "main.h"
#include "dwt_stm32_delay.h"
#include "ov7670.h"
#include "bluetooth.h"

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM1_Init(void);
static void init_camera(void);
static void capture_image(void);
static void send_image_via_bluetooth(void);

I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart1;
TIM_HandleTypeDef htim1;

uint32_t sensor_time;
uint16_t distance;
uint8_t image_buffer[IMAGE_SIZE]; // Adjust IMAGE_SIZE to match your image buffer size

uint32_t Read_HCSR04() {
    uint32_t local_time = 0;

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // pull the trig pin high
    DWT_Delay_us(10);                                   // wait for 10 us
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // pull the trig pin low

    while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)));

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) {        // while the pin is high
        local_time++;                                   // increment local time
        DWT_Delay_us(1);                                // every 1 us
    }

    return local_time * 2;
}

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_I2C1_Init();
    MX_USART1_UART_Init();
    MX_TIM1_Init();
    DWT_Delay_Init();

    init_camera();
    bluetooth_init(&huart1);

    while (1) {
        sensor_time = Read_HCSR04(); // get the high time
        distance = sensor_time * .034 / 2; // use the formula to get the distance

        if(distance <= 4) {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_SET);
            capture_image();
            send_image_via_bluetooth();
        } else if(distance > 4 && distance <= 6) {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
        } else if(distance > 6 && distance <= 8) {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
        } else if(distance > 8 && distance <= 10) {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_RESET);
        }
    }
}

void init_camera(void) {
    // Initialize the camera OV7670
    OV7670_Init(&hi2c1, &htim1);
}

void capture_image(void) {
    // Capture image using OV7670
    OV7670_Capture(image_buffer);
}

void send_image_via_bluetooth(void) {
    // Send the image buffer via Bluetooth
    bluetooth_send(image_buffer, IMAGE_SIZE);
}

void SystemClock_Config(void) {
    // ... existing clock configuration code ...
}

static void MX_GPIO_Init(void) {
    // ... existing GPIO initialization code ...
}

static void MX_I2C1_Init(void) {
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
        Error_Handler();
    }
}

static void MX_USART1_UART_Init(void) {
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 9600;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart1) != HAL_OK) {
        Error_Handler();
    }
}

static void MX_TIM1_Init(void) {
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    TIM_MasterConfigTypeDef sMasterConfig = {0};

    htim1.Instance = TIM1;
    htim1.Init.Prescaler = 0;
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim1.Init.Period = 0;
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim1.Init.RepetitionCounter = 0;
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
        Error_Handler();
    }
}

void Error_Handler(void) {
    // ... existing error handler code ...
}
